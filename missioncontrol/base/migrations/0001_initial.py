# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-05-09 20:02
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('telemetry_name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'application',
            },
        ),
        migrations.CreateModel(
            name='Build',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('build_id', models.CharField(max_length=14)),
                ('version', models.CharField(max_length=20)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Application')),
            ],
            options={
                'db_table': 'build',
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('update_interval', models.DurationField()),
                ('min_expected_client_count', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'channel',
            },
        ),
        migrations.CreateModel(
            name='Datum',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField()),
                ('value', models.FloatField()),
                ('usage_hours', models.FloatField()),
                ('client_count', models.PositiveIntegerField()),
                ('build', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='base.Build')),
            ],
            options={
                'db_table': 'datum',
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('enabled', models.BooleanField()),
            ],
            options={
                'db_table': 'experiment',
            },
        ),
        migrations.CreateModel(
            name='ExperimentBranch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Experiment')),
            ],
            options={
                'db_table': 'experiment_branch',
            },
        ),
        migrations.CreateModel(
            name='Measure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(max_length=100)),
                ('min_version', models.PositiveIntegerField(null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('application', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='base.Application')),
                ('channels', models.ManyToManyField(related_name='measure_channels', to='base.Channel')),
            ],
            options={
                'db_table': 'measure',
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('telemetry_name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'db_table': 'platform',
            },
        ),
        migrations.AddField(
            model_name='measure',
            name='platform',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='base.Platform'),
        ),
        migrations.AddField(
            model_name='datum',
            name='experiment_branch',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.ExperimentBranch'),
        ),
        migrations.AddField(
            model_name='datum',
            name='measure',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Measure'),
        ),
        migrations.AddField(
            model_name='build',
            name='channel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Channel'),
        ),
        migrations.AddField(
            model_name='build',
            name='platform',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.Platform'),
        ),
        migrations.AlterUniqueTogether(
            name='measure',
            unique_together=set([('name', 'application', 'platform')]),
        ),
        migrations.AlterUniqueTogether(
            name='experimentbranch',
            unique_together=set([('experiment', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='datum',
            unique_together=set([('build', 'measure', 'timestamp'), ('experiment_branch', 'measure', 'timestamp')]),
        ),
        migrations.AlterUniqueTogether(
            name='build',
            unique_together=set([('platform', 'channel', 'build_id', 'version')]),
        ),
    ]
